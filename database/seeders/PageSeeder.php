<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use App\Models\Page;

class PageSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        Page::insert([
            'version_id'=>1,
            'title' => 'Installation',
            'link_text'=>'Installation',
            'link_path'=>'install',
            'text'=>' How to Install <strong>Version # 1</strong> The Laravel framework has a few system requirements. Of course, all of these requirements are satisfied by the Laravel Homestead virtual machine, so it s highly recommended that you use Homestead as your local Laravel development environment.<p> We like to call Laravel a  progressive  framework. By that, we mean that Laravel grows with you. If you re just taking your first steps into web development, Laravel s vast library of documentation, guides, and video tutorials will help you learn the ropes without becoming overwhelmed <h3>A Scalable Framework</h3>
Laravel is incredibly scalable. Thanks to the scaling-friendly nature of PHP and Laravel s built-in support for fast, distributed cache systems like Redis, horizontal scaling with Laravel is a breeze. In fact, Laravel applications have been easily scaled to handle hundreds of millions of requests per month'
        ]);

        Page::insert([
            'version_id'=>2,
            'title' => 'Creating a Laravel Project',
            'link_text'=>'Installation',
            'link_path'=>'install',
            'text'=>'Before creating your first Laravel project, make sure that your local machine has PHP and Composer installed. If you are developing on macOS or Windows, PHP, Composer, Node and NPM can be installed in minutes via Laravel Herd. After you have installed PHP and Composer, you may create a new Laravel project via Composer s create-project command:<p><h3>Initial Configuration</h3> <p>All of the configuration files for the Laravel framework are stored in the config directory. Each option is documented, so feel free to look through the files and get familiar with the options available to you. </p> <p>Laravel needs almost no additional configuration out of the box. You are free to get started developing! However, you may wish to review the config/app.php file and its documentation. It contains several options such as timezone and locale that you may wish to change according to your application.</p>'
        ]);


        Page::insert([
            'version_id'=>1,
            'title' => 'Database: Pagination',
            'link_text'=>'Pagination',
            'link_path'=>'pagination',
            'text'=>'There are several ways to paginate items. The simplest is by using the paginate method on the query builder or an Eloquent query. The paginate method automatically takes care of setting the proper limit and offset based on the current page being viewed by the user. By default, the current page is detected by the value of the page query string argument on the HTTP request. Of course, this value is automatically detected by Laravel, and is also automatically inserted into links generated by the paginator.<h3>Paginating Eloquent Results</h3> <p>Sometimes you may need to render two separate paginators on a single screen that is rendered by your application. However, if both paginator instances use the page query string parameter to store the current page, the two paginato s will conflict. To resolve this conflict, you may pass the name of the query string parameter you wish to use to store the paginators current page via the third argument provided to the paginate, simplePaginate, and cursorPaginate methods:</p>'
        ]);

        Page::insert([
            'version_id'=>2,
            'title' => 'Paginating Query Builder Results',
            'link_text'=>'Pagination',
            'link_path'=>'pagination',
            'text'=>'The Paginator class does not need to know the total number of items in the result set; however, because of this, the class does not have methods for retrieving the index of the last page. The LengthAwarePaginator accepts almost the same arguments as the Paginator; however, it does require a count of the total number of items in the result set.<h3>Cursor Pagination</h3> <p>While paginate and simplePaginate create queries using the SQL "offset" clause, cursor pagination works by constructing "where" clauses that compare the values of the ordered columns contained in the query, providing the most efficient database performance available amongst all of Laravel s pagination methods. This method of pagination is particularly well-suited for large data-sets and  infinite scrolling user interfaces.</p>'
            ]);


    }
}
